" vim: filetype=help foldmethod=marker foldmarker=<<<,>>> modifiable noreadonly
SDW COMMANDS  *sdw-commands*

Rebuild the help tags with: >
	:helptags ~/.vim/doc
======================================================================
GIT *sdw-GIT* <<<
----------------------------------------------------------------------
Basic commands <<<

Create a git repository for the current directory. >
	git init
	git status

Add all files and changes under the cwd >
	git add .
commit all files in the working copy >
	git commit -a
checkout >
	git clone url
fetch and merge a remote branch >
	git pull
remove all random files from the working copy (doesn't remove versioned and ignored files). >
	git clean -f
restore the previous copy of a file or a directory >
	git checkout path
revert to head. Use -f to overwrite local changes. >
	git checkout -f

standard commands >
	git add file
	git rm file
	git mv file

undo a previous commit >
	git revert "HEAD^"
go back to an earlier version >
	git reset "HEAD^"

create a tag >
	git tag -a name
list tags >
	git tag -l
	git show tag

>>>
----------------------------------------------------------------------
Branching and merging	<<<
create a new branch and switch to it
	git checkout -b <branch name>
merging. Switch to branch you want to merge to.
	git checkout master
specify the branch you want to merge into this one.
	git merge <branch name>
delete the unnecessary old branch
	git branch -d <branch name>
if you want to delete a branch you haven't merged
	git branch -D <branch name>

>>>
----------------------------------------------------------------------
Configuration <<<
>
	git config --global user.name "Steven Webb"
	git config --global user.email steven.daniel.webb@gmail.com
	git config --global color.diff auto
	git config --global color.status auto
	git config --global color.branch auto
	git config --global core.editor "gvim -f"

When using the master branch the default remote is origin. When doing a pull,
if remote and branch are not specified using origin and master. >
	git config branch.master.remote origin
	git config branch.master.merge refs/heads/master
Useful for bluehost where the path is not set correctly >
	git config remote.origin.receivepack /home2/attitue1/bin/git-receive-pack
	git config remote.origin.uploadpack /home2/attitue1/bin/git-upload-pack  

>>>
----------------------------------------------------------------------
Creating remote repository <<<

On server in target directory >
	git --bare init

On client >
	git remote add origin ssh://server.com/path_to_target
pushing to the master (on the origin update the master) >
	git push origin master
clone the repository to make it local. >
	git clone url
get the lastest version of the master branch from origin >
	git pull origin master
>>>
----------------------------------------------------------------------
Remote commands <<<
	git remote add origin ssh://server/path
	git remote rm origin
>>>
>>> >>>
======================================================================
RVM <<<

install ruby 1.9.2 >
  rvm install 1.9.2
use ruby 1.9.2 >
  rvm use 1.9.2
set the default rvm to use >
  rvm use 1.9.2 --default
use ruby 1.9.2 with gemset name >
  rvm use 1.9.2@name
list all rubies >
  rvm list
create gemset >
  rvm use 1.9.2@name --create
list all gemsets FOR THE CURRENT RUBY >
  rvm gemset list
list current ruby@gemset >
  rvm tools identifier
delete a gemset >
  rvm gemset delete <gemset>

>>>
======================================================================
APT *APT* *sdw-APT* <<<

to list all installed packages (grep them) >
	dpkg --get-selections
or >
	dpkg -l regex
to remove configuration files >
	apt-get remove --purge 

Using apt-get for source packages
download: >
	apt-get source packagename
from inside the package directory, build it with: >
	dpkg-buildpackage -rfakeroot -uc -b
to install the dependencies for building a package >
	apt-get build-dep packagename

compile with debugging symbols (not really apt) >
	./configure CPPFLAGS=-DDEBUG
	./configure CPPFLAGS=-DDEBUG=1

>>>
======================================================================
SVN *SVN* *sdw-SVN* <<<

svn create a repository on the server >
	svnadmin create --fs-type fsfs /home/user/svn
initial import >
	svn import /path/to/project/ file:///home/user/svn/project/trunk -m 'Initial import'
checkout copy >
	svn checkout file:///home/user/svn/project
	svn checkout svn+ssh://hammer/usr/student/tango/webbsd/svn/project
which files are new or have been modified >
	svn status
add 'file' to the respository >
	svn add file
commit changes to the repository (do an update first) >
	svn update
	svn commit -m "message"
ignore files in the project directory. Can use * as a wild card. >
	svn propedit svn:ignore ./some_path
print out the contents of a repository (from withing hammer:~/svn) >
	svnlook tree .
Set up the permissions for a svn repository. Assume svn_grp exists and the user is a member. >
	chgrp svn_grp -R repository
	find repository -type d -exec chmod g+rws {} \;
	find repository -type f -perm 600 -exec chmod 660 {} \;
	find repository -type f -perm 400 -exec chmod 440 {} \;
to check out an old version >
	svn update -r <rev> <file>

>>>
======================================================================
SSH <<<

Public/Private key authentication
generate the  passwords on the client >
	ssh-keygen -t rsa
copy the public key to the server >
	scp id_rsa.pub hostname:/home/steve
connect to the host >
	ssh hostname
add it to the authorized file >
	cat ~/id_rsa.pub ~/.ssh/authorized_keys
>>>
======================================================================
rsync <<<
sync home area to three >
	rsync -a ~ three:/home

sync home area to one >
	rsync -a ~ one:/home/webbsd

backup laptop to external hd
	rsync -a /home/webbsd /media/disk/Backup/home/
	rsync -a /volatile/webbsd /media/disk/Backup/volatile/

>>>
======================================================================
MISC *MISC* *sdw-MISC* <<<

to save a disk image >
	dd if=/dev/hda of=teh_entire_disk.img

to copy over an entire partition (e.g. copy to a new hd) need to re-set up the bootloader. boot in with a boot disk (knoppix), chroot, install grub >
	cp -dfxpRv

to record off the radio >
	rec -c 2 -r 22050 -s w test.wav

to install grub in mbr from knoppix >
	mount the root directory (/dev/sda6 in this case)
	sudo grub-install --root-directory=/media/XXX-XXX-XXX /dev/sda --recheck

split oggs >
	mp3splt -t 5.0 -o "name-@n" name.ogg

java profiling >
	java -Xrunhprof:file=output.txt,cpu=samples Simulator -numNodes 100 -architecture DHT

recursive sed (replace all instances of 4 spaces with a tab >
	find . -name "*.java" -exec sed -i -e 's/    /\t/g' {} \;

rip and convert a real-player stream using mplayer >
	mplayer -dumpstream "rtsp://XXX.rm" -dumpfile filename.rm
	mplayer -vo null -vc dummy -ao pcm:waveheader:file=XXX.wav XXX.rm

converts an eps figure to a png >
	convert -density 300 srs-1.eps -flatten srs-1.png
	convert -density 300 -rotate 90 srs-1.eps -flatten srs-1.png
	convert -density 300 inconsistency1.svg -flatten -trim inconsistency1.png

to rename upper case to lower case
	rename 'y/A-Z/a-z/' *

>>>
======================================================================
Old <<<

to strip out the rythmbox filenames >
	cat Exercise.m3u |  grep "^File" |  sed -e "s/File[0-9]*=\(.*\)/\1/" |  perl -e 'print map {$_->[1]} sort {$a->[0]<=>$b->[0]} map {[rand,$_]} <>' |  sed -e "s/\//\\\//" | sed -e "s/ /\\ /" | sed -e "s/^/cp /" |  sed -e "s/\n/ \/media\/usbdisk\//" > Playlist.m3u
	cat Exercise.m3u |  grep "^File" |  sed -e "s/File[0-9]*=\(.*\)/\1/" |  perl -e 'print map {$_->[1]} sort {$a->[0]<=>$b->[0]} map {[rand,$_]} <>' | sed -e "s/ /\\ /g" -e "s/(/\\(/g" -e "s/)/\\)/g" -e "s/'/\\'/g" | sed -e "s/^/cp /" |  sed -e 's/$/ \/media\/usbdisk\//' | grep -v .ogg > Playlist.m3u
	cat Exercise.m3u |  grep "^File" |  sed -e "s/File[0-9]*=\(.*\)/\1/" |  perl -e 'print map {$_->[1]} sort {$a->[0]<=>$b->[0]} map {[rand,$_]} <>' | sed -e "s/ /\\ /g" -e "s/(/\\(/g" -e "s/)/\\)/g" -e "s/'/\\'/g" | grep -v .ogg > Playlist3.m3u

transform text files to move files >
	%s/\([ ()']\)/\\\1/g
	%s/^\(.*\)$/mv \1 \1/g

print double sided (duplex) >
	mpage -1 -t -Php4-2 filename
	pdf2ps filename | mpage -1 -t -Php4-2

>>>
======================================================================
